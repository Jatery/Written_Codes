#include <stdio.h>
#include <string.h>
#include <math.h>
#include <assert.h>
#include <stdbool.h>

#define MAXSTRINGLENGTH 5
#define MAXN 10

int max(int a, int b) {
	return (a > b ? a : b);
}

int hashIndex(char str[MAXSTRINGLENGTH], int n) {
	int s = 0;
	for(int i = 0; i < strlen(str); ++i) {
		s = (s + str[i] - 'a' + 1) * 29;
	}
	return s % (n * n);
}

typedef struct{
	char string[MAXN][MAXN][MAXN][MAXSTRINGLENGTH];
	int height[MAXN][MAXN];
} Tower;

typedef struct{
	char index[MAXSTRINGLENGTH];
	int x;
	int y;
} Hash;

void getTower(Tower *tower, Hash hash[MAXN * MAXN][10], int n) {
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j <= i; ++j) {
			for(int k = 0; k <= i; ++k) {
				scanf("%s", tower->string[n - i][j][k]);
			}
			tower->height[i][j] = n - max(i, j);
		}
	}
#ifdef DEBUG
	for(int i = 0; i < n; ++i) 
		for(int j = 0; j < n; ++j) {
			for(int k = 0; k < n; ++k) {
				if (strcmp(tower->string[n - i][j][k], "") != 0)
					printf("%s ", tower->string[n - i][j][k]);
				else
					printf("0 ");
			}
			printf("\n");
		}
#endif
}

void pushTable(Tower tower, Hash hash[MAXN * MAXN][10], Hash tmp[], int n) {
	bool flag = 0;
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < n; ++j) {
			//assert (strcmp(tower.string[tower.height[i][j]][i][j], "") != 0);
			int key = hashIndex(tower.string[tower.height[i][j]][i][j], n);
			for (int k = 0; k < 10; ++k) {
				if (strcmp(hash[key][k].index, tower.string[tower.height[i][j]][i][j]) == 0) {
#ifdef DEBUG
					printf("%s\n", hash[key][k].index);
#endif
					tmp[0] = hash[key][k];
					strncpy(tmp[1].index, tower.string[tower.height[i][j]][i][j], 5);
					tmp[1].x = i;
					tmp[1].y = j;
					strncpy(hash[key][k].index, "", 5);
					flag = 1;
					break;
				}
			}
			if (!flag) {
				int k = 0;
				while (strcmp(hash[key][k].index, "") != 0)
					k++;
				assert (k < 10);
				strncpy(hash[key][k].index, tower.string[tower.height[i][j]][i][j], 5);
				hash[key][k].x = i;
				hash[key][k].y = j;
				flag = 0;
			}
		}
	}
#ifdef DEBUG
	printf("%s %d %d\n%s %d %d\n", tmp[0].index, tmp[0].x, tmp[0].y, tmp[1].index, tmp[1].x, tmp[1].y);
#endif
}
int main() {
	int n;
	Tower tower;
	Hash hash[MAXN * MAXN][10], tmp[2];
	scanf("%d", &n);

	assert(n <= MAXN);

	getTower(&tower, hash, n);
	pushTable(tower, hash, tmp, n);
	
}
